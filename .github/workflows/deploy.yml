name: üöÄ Deploy to EC2 OCTAVIEW SERVER

on:
  push:
    branches:
      - master  # Change this to deploy a different branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Prevent workflow from running indefinitely
    
    steps:
      - name: üöÄ Checkout code
        uses: actions/checkout@v3
       
      - name: üîë Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}  # Ensure this is your Elastic IP
          username: ubuntu
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          port: 22
          command_timeout: 20m
          script: |
            set -e  # Exit immediately if a command fails
            
            echo "‚úÖ Connected to EC2"
            echo "‚ö° Checking the deployment directory..."
            if [ ! -d "/home/ubuntu/OCTAVIEW" ]; then
              echo "‚ùå Directory not found! Creating it..."
              mkdir -p /home/ubuntu/OCTAVIEW
            fi
            
            cd /home/ubuntu/OCTAVIEW
            echo "üìÅ Current directory: $(pwd)"
            
            echo "‚ö° Pulling latest code from GitHub..."
            if [ ! -d ".git" ]; then
              echo "üîÑ Initializing git repository..."
              git init
              git remote add origin https://github.com/Octaview-b2b/OCTAVIEW.git  # Change to your repo
            else
              git remote set-url origin https://github.com/Octaview-b2b/OCTAVIEW.git  # Change to your repo
            fi
            
            git fetch --all
            git reset --hard origin/master
            git pull origin master --force
            
            echo "üì¶ Installing dependencies..."
            if ! command -v node &> /dev/null || ! command -v npm &> /dev/null; then
              echo "Node.js not found, installing..."
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo apt-get install -y nodejs
              echo "Node.js $(node -v) and npm $(npm -v) installed!"
            else
              echo "‚úÖ Node.js $(node -v) and npm $(npm -v) are already installed!"
            fi
            
            npm install --no-fund --no-audit
            
            echo "üî® Building the project..."
            npm run build
            
            echo "üê≥ Ensuring Docker is installed..."
            if ! command -v docker &> /dev/null; then
              echo "‚ö†Ô∏è Docker not found! Installing..."
              curl -fsSL https://get.docker.com | sh
              sudo usermod -aG docker ubuntu
            fi
            
            echo "üõë Stopping and removing old containers..."
            if docker compose down; then
              echo "‚úÖ Containers stopped."
            else
              echo "‚ö†Ô∏è Failed to stop containers. Ignoring error..."
            fi
            
            echo "üßπ Cleaning up Docker resources..."
            if docker system prune -af --volumes; then
              echo "‚úÖ Docker resources cleaned up."
            else
              echo "‚ö†Ô∏è Failed to clean up Docker resources. Ignoring error..."
            fi
            
            echo "üîÑ Building and restarting containers..."
            if docker compose up --build -d; then
              echo "‚úÖ Containers restarted successfully."
            else
              echo "‚ùå Failed to start containers. Exiting..."
              exit 1
            fi
            
            echo "üåê Ensuring Nginx is installed and restarting..."
            if ! command -v nginx &> /dev/null; then
              echo "‚ö†Ô∏è Nginx not found! Installing..."
              sudo apt-get update
              sudo apt-get install -y nginx
            fi
            
            if sudo systemctl restart nginx; then
              echo "‚úÖ Nginx restarted successfully."
            else
              echo "‚ö†Ô∏è Failed to restart Nginx. Ignoring error..."
            fi
            
            echo "‚úÖ Deployment complete!"
