name: 🚀 Deploy to EC2 OCTAVIEW SERVER

on:
  push:
    branches:
      - master  # Change this to deploy a different branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 🚀 Checkout code
        uses: actions/checkout@v3

      - name: 🔑 Set up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" | base64 --decode > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa

          touch ~/.ssh/known_hosts
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: 🔍 Test SSH Connection
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} "echo '✅ SSH connection successful'"

      - name: 📂 Deploy and Restart Services
        env:
          GIT_BRANCH: master  # Define the branch to deploy
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            set -e  # Exit immediately if a command fails

            echo "✅ Connected to EC2"
            echo "⚡ Checking the deployment directory..."
            if [ ! -d "/home/ubuntu/OCTAVIEW" ]; then
              echo "❌ Directory not found! Creating it..."
              mkdir -p /home/ubuntu/OCTAVIEW
            fi

            cd /home/ubuntu/OCTAVIEW
            echo "📁 Current directory: $(pwd)"

            echo "⚡ Setting up SSH for Git..."
            eval "$(ssh-agent -s)"
            ssh-add ~/.ssh/id_rsa

            if [ ! -f ~/.ssh/config ]; then
              echo "⚡ Creating SSH config for GitHub..."
              echo -e "Host github.com\n  StrictHostKeyChecking no\n  IdentityFile ~/.ssh/id_rsa" > ~/.ssh/config
              chmod 600 ~/.ssh/config
            fi

            echo "⚡ Pulling latest code from GitHub..."
            git remote set-url origin git@github.com:MammenMathew/octaview.git  # Change to your repo
            git fetch origin
            git checkout "${{ env.GIT_BRANCH }}"
            git reset --hard origin/"${{ env.GIT_BRANCH }}"
            git pull origin "${{ env.GIT_BRANCH }}"

            echo "📦 Installing dependencies..."
            npm install --frozen-lockfile

            echo "🔨 Building the project..."
            npm run build

            echo "🛑 Stopping and removing old containers..."
            docker compose down

            echo "🧹 Removing unused Docker resources..."
            docker system prune -af

            echo "🔄 Building and restarting containers..."
            docker compose up --build -d

            echo "🌐 Restarting Nginx..."
            sudo systemctl restart nginx

            echo "✅ Deployment complete!"
          EOF